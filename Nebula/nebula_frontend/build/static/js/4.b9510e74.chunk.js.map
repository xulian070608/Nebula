{"version":3,"sources":["components/Floormap/lights.js","components/Floormap/Text.js","components/Floormap/Sign.js","components/Floormap/Mesh.js","components/Floormap/Camera.js","components/Floormap/CameraControl.js","components/Floormap/PopperControl.js","components/Floormap/RoomInfoModal.js","components/Floormap/helpers.js","components/Floormap/styles.js","components/Floormap/Viz.js"],"names":["EnvironmentLight","environmentLightGroup","THREE","directionalLight1","position","set","add","directionalLight2","TextGenerator","mesh","gravityCenter","centroidX","gravityX","centroidY","gravityY","text","userData","roomNumber","texture","TextTexture","fontSize","fontFamily","align","fontWeight","fontStyle","material","color","map","sprite","scalar","breaklines","split","length","w","image","width","h","height","scale","setX","multiplyScalar","SignGenerator","geometry","computeBoundingBox","img_path","roomName","spriteMap","load","spriteMaterial","calculatePolygonGravityCeneter","exteriorBoundary","area","i","x","y","nextX","nextY","tempArea","RoomGenerator","roomInfo","id","attributes","room_name","room_number","has_window","deskcount","physical_deskcount","program_type","internal_room_count","has_av","outline","roomColor","colorSchema","roomBoundary","coordinates","roomExterior","exteriorPointArray","point","push","geometryShape","roomHoles","slice","HolesArray","HoleArray","j","holes","steps","depth","bevelEnabled","createShape","roomGeometry","roomMaterial","side","transparent","shininess","roomID","physicalDeskcount","internalRoomCount","hasAV","programType","hasWindow","roomText","roomFrameEdges","edgeMtl","linewidth","roomFrameLines","z","callback","alert","planeShape","receiveShadow","roomSign","calculateRegion","params","bb3","targetWidth","targetHeight","groupLeft","min","groupRight","max","groupTop","groupBottom","Camera","camera","up","zoom","updateProjectionMatrix","CameraControl","renderer","controls","OrbitControls","domElement","enableRotate","maxPolarAngle","Math","PI","mouseButtons","LEFT","PAN","MIDDLE","DOLLY","RIGHT","ROTATE","screenSpacePanning","target","useStyles","makeStyles","theme","card","minWidth","info","paddingLeft","spacing","PopperX","props","classes","isTouched","useState","window","innerWidth","pointX","setPointX","innerHeight","pointY","setPointY","anchorEl","clientWidth","clientHeight","getBoundingClientRect","top","bottom","right","left","addEventListener","Popper","open","transition","placement","TransitionProps","Fade","timeout","Card","className","Typography","l","paper","backgroundColor","palette","background","RoomInfoModal","React","forwardRef","ref","currentProjectID","floorID","url","ProjectsURL","useFetch","data","loaded","String","setRoomName","setRoomNumber","Number","setDeskcount","setPhysicalDeskcount","setProgramType","setInternalRoomCount","Boolean","setHasWindow","setHasAV","note","setNote","useEffect","editMode","setEditMode","config","headers","tabIndex","Container","maxWidth","Grid","container","alignItems","justify","style","minHeight","item","xs","Button","variant","size","onClick","content","type","axios","patch","Input","defaultValue","inputProps","onChange","event","value","disabled","Checkbox","checked","IconButton","aria-label","CircularProgress","HelperMode","mode","envLights","showAxes","helperGroup","children","forEach","light","lightHelper","cameraHelper","axesHelper","styles","root","viz","button","popper","marginLeft","marginTop","modal","display","justifyContent","Viz","timmerHandle","INTERSECTED","useRef","mount","isButtonOn","isDrag","mouse","raycaster","setIsTouched","deskCount","physicalDeskCount","setRoomInfo","setOpen","setRoomID","useFetchList","rooms","current","scene","antialias","setClearColor","setSize","primaryGroup","name","secondaryWork","secondaryExtra","meshArray","res","GroupBB3","setFromObject","getCenter","environmentLight","helpers","renderScene","render","handleResize","onButtonClick","preventDefault","secondaryWorkMeshes","getObjectByName","meshes","setHex","onMouseDown","setTimeout","updateMousePos","onMouseMove","offsetX","offsetY","setFromCamera","intersects","intersectObjects","object","currentHex","getHex","onMouseUp","clearTimeout","appendChild","document","getElementById","requestAnimationFrame","animate","update","removeEventListener","removeChild","remove","dispose","Modal","anchor","onClose"],"mappings":"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","file":"static/js/4.b9510e74.chunk.js","sourcesContent":["import * as THREE from \"three\";\r\n\r\n// environment lights settings\r\nfunction EnvironmentLight() {\r\n  let environmentLightGroup = new THREE.Group();\r\n\r\n  // two light from opposite directions with difference intensity\r\n  var directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.65);\r\n  directionalLight1.position.set(60000, 60000, 60000);\r\n  environmentLightGroup.add(directionalLight1);\r\n\r\n  var directionalLight2 = new THREE.DirectionalLight(0xffffff, 1);\r\n  directionalLight2.position.set(-60000, -60000, 60000);\r\n  environmentLightGroup.add(directionalLight2);\r\n\r\n  return environmentLightGroup;\r\n}\r\n\r\nexport default EnvironmentLight;\r\n","import TextTexture from \"three.texttexture\";\r\nimport * as THREE from \"three\";\r\n\r\nfunction TextGenerator(mesh, gravityCenter) {\r\n  // Option 1: use three.texttexture to show text\r\n  // these option only worked on 19.0.0 version\r\n  // DO NOT UPDATE TO THE LATEST VERISON\r\n\r\n  // calculate the location of this text\r\n  // mesh.geometry.computeBoundingBox();\r\n  // const bb3 = mesh.geometry.boundingBox;\r\n  // const centroidX = (bb3.max.x + bb3.min.x) / 2;\r\n  // const centroidY = (bb3.max.y + bb3.min.y) / 2;\r\n  const centroidX = gravityCenter.gravityX;\r\n  const centroidY = gravityCenter.gravityY;\r\n  let text = mesh.userData.roomNumber;\r\n\r\n  // text texture settings\r\n  let texture = new TextTexture({\r\n    text: text,\r\n    fontSize: 64,\r\n    fontFamily: \"Arial, Helvetica, sans-serif\",\r\n    align: \"center\",\r\n    fontWeight: \"bold\", // normal, bold, bolder, lighter\r\n    fontStyle: \"normal\", // normal, italic, oblique,\r\n  });\r\n  let material = new THREE.SpriteMaterial({\r\n    color: \"rgb(0,0,0)\",\r\n    map: texture,\r\n  });\r\n  let sprite = new THREE.Sprite(material);\r\n\r\n  // deal with text with multiple lines\r\n  let scalar = 900;\r\n  const breaklines = text.split(\"\\n\").length;\r\n  if (breaklines > 1) {\r\n    scalar = breaklines * (scalar - 0.26);\r\n  }\r\n\r\n  // resize the sprite depending on aspect\r\n  let w = texture.image.width;\r\n  let h = texture.image.height;\r\n  // console.log(text, w, h);\r\n  sprite.scale.set(1, 1, 1);\r\n  sprite.scale.setX(w / h).multiplyScalar(scalar);\r\n\r\n  sprite.position.set(centroidX, centroidY, 600);\r\n  // // Option 2: create canvas directly\r\n  // // using canvas to draw text\r\n  // let canvas = document.createElement(\"canvas\");\r\n  // let ctx = canvas.getContext(\"2d\");\r\n  // ctx.fillStyle = \"#000000\";\r\n  // ctx.font = \"Bold 64px Arial\";\r\n  // ctx.lineWidth = 4;\r\n  // ctx.fillText(text, 60, 100);\r\n  // ctx.textAlign = \"center\";\r\n  // let texture = new THREE.Texture(canvas);\r\n  // texture.needsUpdate = true;\r\n\r\n  // // use sprite to map the text texture\r\n  // let material = new THREE.SpriteMaterial({ map: texture });\r\n  // let sprite = new THREE.Sprite(material);\r\n  return sprite;\r\n}\r\n\r\nexport default TextGenerator;\r\n","import * as THREE from \"three\";\r\n\r\nfunction SignGenerator(mesh, gravityCenter) {\r\n  // calculate the location of this text\r\n  mesh.geometry.computeBoundingBox();\r\n  // const bb3 = mesh.geometry.boundingBox;\r\n  // const centroidX = (bb3.max.x + bb3.min.x) / 2;\r\n  // const centroidY = (bb3.max.y + bb3.min.y) / 2;\r\n  const centroidX = gravityCenter.gravityX;\r\n  const centroidY = gravityCenter.gravityY;\r\n\r\n  var img_path;\r\n  switch (mesh.userData.roomName) {\r\n    case \"MEN WC\":\r\n      img_path = \"https://api.c3plus.top/media/images/origin/wc_m2x.png\";\r\n      break;\r\n    case \"W RESTROOM\":\r\n    case \"WOMEN WC\":\r\n      img_path = \"https://api.c3plus.top/media/images/origin/wc_f2x.png\";\r\n      break;\r\n    case \"RESTROOM\":\r\n    case \"UNISEX\":\r\n      img_path = \"https://api.c3plus.top/media/images/origin/wc_u2x.png\";\r\n      break;\r\n    case \"VIP Lounge\":\r\n    case \"MINI LOUNGE\":\r\n    case \"LOUNGE\":\r\n      img_path = \"https://api.c3plus.top/media/images/origin/lounge.png\";\r\n      break;\r\n    case \"IT\":\r\n      img_path = \"https://api.c3plus.top/media/images/origin/IT_room2x.png\";\r\n      break;\r\n    case \"MAIL\":\r\n      img_path = \"https://api.c3plus.top/media/images/origin/mail_room2x.png\";\r\n      break;\r\n    case \"PHONE BOOTH\":\r\n      img_path = \"https://api.c3plus.top/media/images/origin/phone_booth2x.png\";\r\n      break;\r\n    case \"Cafe\":\r\n    case \"PANTRY\":\r\n      img_path = \"https://api.c3plus.top/media/images/origin/pantry2x.png\";\r\n      break;\r\n    case \"PRINTER\":\r\n      img_path = \"https://api.c3plus.top/media/images/origin/printer2x.png\";\r\n      break;\r\n    case \"STOR\":\r\n      img_path = \"https://api.c3plus.top/media/images/origin/storage2x.png\";\r\n      break;\r\n    case \"STAIR FOYER\":\r\n      img_path = \"https://api.c3plus.top/media/images/origin/stair.png\";\r\n      break;\r\n    case \"MOTHER RM\":\r\n      img_path = \"https://api.c3plus.top/media/images/origin/motherroom2x.png\";\r\n      break;\r\n    case \"MOP\":\r\n      img_path = \"https://api.c3plus.top/media/images/origin/maintenance2x.png\";\r\n      break;\r\n    case \"MECH\":\r\n      img_path = \"https://api.c3plus.top/media/images/origin/mechanical2x.png\";\r\n      break;\r\n    case \"ADA\":\r\n      img_path = \"https://api.c3plus.top/media/images/origin/wc_ada.png\";\r\n      break;\r\n    case \"COMMUNITY BAR\":\r\n      img_path = \"https://api.c3plus.top/media/images/origin/we_reception.png\";\r\n      break;\r\n    default:\r\n      return new THREE.Object3D();\r\n  }\r\n\r\n  var spriteMap = new THREE.TextureLoader().load(img_path);\r\n  var spriteMaterial = new THREE.SpriteMaterial({ map: spriteMap });\r\n  var sprite = new THREE.Sprite(spriteMaterial);\r\n\r\n  let scalar = 1000;\r\n  sprite.scale.multiplyScalar(scalar);\r\n  sprite.position.set(centroidX, centroidY, 600);\r\n\r\n  return sprite;\r\n\r\n  // var texture = new THREE.TextureLoader().load(\"../img/meeting.png\");\r\n\r\n  // var material = new THREE.MeshBasicMaterial({ map: texture, color: 0xffffff });\r\n  // // create a sprite\r\n  // var spriteMaterial = new THREE.SpriteMaterial({\r\n  //   color: 0xffffff,\r\n  //   map: texture\r\n  // });\r\n  // let sprite = new THREE.Sprite(material);\r\n  // sprite.position.z = 3;\r\n  // return sprite;\r\n\r\n  // * local images cannot be loaded\r\n  // var spriteMap = new THREE.TextureLoader().load(\r\n  //   \"http://127.0.0.1:3002/meeting.png\"\r\n  // );\r\n  // console.log(spriteMap);\r\n  // var spriteMaterial = new THREE.SpriteMaterial({ map: spriteMap });\r\n  // console.log(spriteMaterial);\r\n  // var sprite = new THREE.Sprite(spriteMaterial);\r\n  // sprite.position.set(0, 0, 10);\r\n  // // var imageWidth = spriteMaterial.map.image.width;\r\n  // // var imageHeight = spriteMaterial.map.image.height;\r\n  // // sprite.scale.set(2 * imageWidth, 2 * imageHeight, 1.0);\r\n  // scene.add(sprite);\r\n}\r\n\r\nexport default SignGenerator;\r\n","import * as THREE from \"three\";\r\nimport TextGenerator from \"./Text\";\r\nimport SignGenerator from \"./Sign\";\r\nimport { colorSchema } from \"../../utils/Constant\";\r\n\r\nfunction RoomGenerator(roomInfo) {\r\n  const { id, attributes } = roomInfo;\r\n  const {\r\n    // level_id,\r\n    // room_revit_id,\r\n    // room_uuid,\r\n    room_name,\r\n    room_number,\r\n    area,\r\n    has_window,\r\n    deskcount,\r\n    physical_deskcount,\r\n    program_type,\r\n    internal_room_count,\r\n    has_av,\r\n    outline,\r\n    // level_revit_id\r\n  } = attributes;\r\n\r\n  var mesh;\r\n\r\n  if (program_type === \"WORK\" || program_type === \"MEET\") {\r\n    // change color for WORK room has window\r\n    let roomColor;\r\n    switch (has_window) {\r\n      case true:\r\n        roomColor = 0xe4f3f7;\r\n        break;\r\n      default:\r\n        roomColor = colorSchema[program_type];\r\n    }\r\n\r\n    let [roomGeometry, gravityCenter] = createShape(outline);\r\n    var roomMaterial = new THREE.MeshPhongMaterial({\r\n      color: roomColor,\r\n      side: THREE.BackSide,\r\n      transparent: false,\r\n      shininess: 0,\r\n    });\r\n    mesh = new THREE.Mesh(roomGeometry, roomMaterial);\r\n\r\n    // set an attribute for the object\r\n    mesh.userData = {\r\n      roomID: id,\r\n      roomName: room_name,\r\n      roomNumber: room_number,\r\n      area: area,\r\n      deskcount: deskcount,\r\n      physicalDeskcount: physical_deskcount,\r\n      internalRoomCount: internal_room_count,\r\n      hasAV: has_av,\r\n      programType: program_type,\r\n      hasWindow: has_window,\r\n    };\r\n\r\n    // add room number text on rooms\r\n    const roomText = new TextGenerator(mesh, gravityCenter);\r\n    mesh.add(roomText);\r\n\r\n    // add frame lines for the rooms\r\n    let roomFrameEdges = new THREE.EdgesGeometry(roomGeometry, 1);\r\n    let edgeMtl = new THREE.LineBasicMaterial({\r\n      color: 0x000000,\r\n      linewidth: 1,\r\n    });\r\n    let roomFrameLines = new THREE.LineSegments(roomFrameEdges, edgeMtl);\r\n    mesh.add(roomFrameLines);\r\n\r\n    // avoid the overlap with planes\r\n    mesh.position.z = 1;\r\n\r\n    // set a method for the object\r\n    mesh.callback = function () {\r\n      alert(\"hello three\");\r\n    };\r\n\r\n    return mesh;\r\n  } else {\r\n    let [roomGeometry, gravityCenter] = planeShape(outline);\r\n    let roomMaterial = new THREE.LineBasicMaterial({\r\n      color: colorSchema[program_type],\r\n    });\r\n    mesh = new THREE.Mesh(roomGeometry, roomMaterial);\r\n\r\n    mesh.userData = {\r\n      roomName: room_name,\r\n      roomNumber: room_number,\r\n      hasAV: has_av,\r\n      programType: program_type,\r\n    };\r\n\r\n    mesh.receiveShadow = true;\r\n    const roomSign = new SignGenerator(mesh, gravityCenter);\r\n    mesh.add(roomSign);\r\n    return mesh;\r\n  }\r\n}\r\n\r\nfunction createShape(outline) {\r\n  var roomBoundary = outline.coordinates;\r\n  var roomExterior = roomBoundary[0];\r\n  var exteriorPointArray = [];\r\n\r\n  for (let i = 0; i < roomExterior.length; i++) {\r\n    let x = roomExterior[i][0];\r\n    let y = roomExterior[i][1];\r\n    let point = new THREE.Vector2(x, y);\r\n    exteriorPointArray.push(point);\r\n  }\r\n\r\n  var gravityCenter = new calculatePolygonGravityCeneter(roomExterior);\r\n\r\n  var geometryShape = new THREE.Shape(exteriorPointArray);\r\n\r\n  if (roomBoundary.length > 1) {\r\n    var roomHoles = roomBoundary.slice(1, roomBoundary.length);\r\n    var HolesArray = [];\r\n    for (let i = 0; i < roomHoles.length; i++) {\r\n      var HoleArray = [];\r\n      for (let j = 0; j < roomHoles[i].length; j++) {\r\n        let x = roomHoles[i][j][0];\r\n        let y = roomHoles[i][j][1];\r\n        let point = new THREE.Vector2(x, y);\r\n        HoleArray.push(point);\r\n      }\r\n      HolesArray.push(new THREE.Path(HoleArray));\r\n    }\r\n    geometryShape.holes = HolesArray;\r\n  }\r\n\r\n  var extrudeSettings = { steps: 1, depth: 1500, bevelEnabled: false };\r\n  var geometry = new THREE.ExtrudeBufferGeometry(\r\n    geometryShape,\r\n    extrudeSettings\r\n  );\r\n\r\n  return [geometry, gravityCenter];\r\n}\r\n\r\nfunction planeShape(outline) {\r\n  var roomBoundary = outline.coordinates;\r\n  var roomExterior = roomBoundary[0];\r\n  var exteriorPointArray = [];\r\n\r\n  for (let i = 0; i < roomExterior.length; i++) {\r\n    let x = roomExterior[i][0];\r\n    let y = roomExterior[i][1];\r\n    let point = new THREE.Vector2(x, y);\r\n    exteriorPointArray.push(point);\r\n  }\r\n\r\n  var gravityCenter = new calculatePolygonGravityCeneter(roomExterior);\r\n\r\n  var geometryShape = new THREE.Shape(exteriorPointArray);\r\n\r\n  if (roomBoundary.length > 1) {\r\n    var roomHoles = roomBoundary.slice(1, roomBoundary.length);\r\n    var HolesArray = [];\r\n    for (let i = 0; i < roomHoles.length; i++) {\r\n      var HoleArray = [];\r\n      for (let j = 0; j < roomHoles[i].length; j++) {\r\n        let x = roomHoles[i][j][0];\r\n        let y = roomHoles[i][j][1];\r\n        let point = new THREE.Vector2(x, y);\r\n        HoleArray.push(point);\r\n      }\r\n      HolesArray.push(new THREE.Path(HoleArray));\r\n    }\r\n    geometryShape.holes = HolesArray;\r\n  }\r\n  var geometry = new THREE.ShapeBufferGeometry(geometryShape);\r\n\r\n  return [geometry, gravityCenter];\r\n}\r\n\r\nfunction calculatePolygonGravityCeneter(exteriorBoundary) {\r\n  var area = 0.0;\r\n  var gravityX = 0.0;\r\n  var gravityY = 0.0;\r\n  for (let i = 0; i < exteriorBoundary.length; i++) {\r\n    let x = exteriorBoundary[i][0];\r\n    let y = exteriorBoundary[i][1];\r\n    let nextX = exteriorBoundary[(i + 1) % exteriorBoundary.length][0];\r\n    let nextY = exteriorBoundary[(i + 1) % exteriorBoundary.length][1];\r\n\r\n    let tempArea = (nextX * y - nextY * x) / 2.0;\r\n\r\n    area += tempArea;\r\n\r\n    gravityX += (tempArea * (x + nextX)) / 3;\r\n    gravityY += (tempArea * (y + nextY)) / 3;\r\n  }\r\n\r\n  gravityX = gravityX / area;\r\n  gravityY = gravityY / area;\r\n\r\n  return { gravityX: gravityX, gravityY: gravityY };\r\n}\r\n\r\nexport default RoomGenerator;\r\n","import * as THREE from \"three\";\r\n\r\nfunction Camera(params) {\r\n  const { width, height } = calculateRegion(params);\r\n\r\n  // camera settings\r\n  const camera = new THREE.OrthographicCamera(\r\n    -width / 2,\r\n    width / 2,\r\n    height / 2,\r\n    -height / 2,\r\n    -300000,\r\n    300000\r\n  );\r\n  camera.up.set(0, 0, 1);\r\n  camera.position.set(0, 0, 30000);\r\n  camera.zoom = 1;\r\n  camera.updateProjectionMatrix();\r\n\r\n  return camera;\r\n}\r\n\r\nfunction calculateRegion(params) {\r\n  const { bb3, targetWidth, targetHeight } = params;\r\n\r\n  // calculate camera region\r\n  const groupLeft = bb3.min.x;\r\n  const groupRight = bb3.max.x;\r\n  const groupTop = bb3.max.y;\r\n  const groupBottom = bb3.min.y;\r\n  let width, height;\r\n  const aspectRatio = (groupRight - groupLeft) / (groupTop - groupBottom);\r\n  const targetAspectRatio = targetWidth / targetHeight;\r\n  const offsetPixels = 18000;\r\n  if (targetAspectRatio > aspectRatio) {\r\n    height = groupTop - groupBottom + offsetPixels;\r\n    width = height * (targetWidth / targetHeight);\r\n  } else {\r\n    width = groupRight - groupLeft + offsetPixels;\r\n    height = width * (targetHeight / targetWidth);\r\n  }\r\n\r\n  return { width, height };\r\n}\r\n\r\nexport default Camera;\r\nexport { calculateRegion };\r\n","import * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\r\n\r\nfunction CameraControl(params) {\r\n  const { camera, renderer } = params;\r\n  // orbit control settings\r\n  const controls = new OrbitControls(camera, renderer.domElement);\r\n  controls.enableRotate = true;\r\n  controls.maxPolarAngle = Math.PI / 2;\r\n  controls.mouseButtons = {\r\n    LEFT: THREE.MOUSE.PAN,\r\n    MIDDLE: THREE.MOUSE.DOLLY,\r\n    RIGHT: THREE.MOUSE.ROTATE\r\n  };\r\n  controls.screenSpacePanning = true;\r\n  controls.target.set(0, 0, 0);\r\n\r\n  return controls;\r\n}\r\n\r\nexport default CameraControl;\r\n","import Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport Card from \"@material-ui/core/Card\";\r\n// import CardContent from \"@material-ui/core/CardContent\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    minWidth: 250,\r\n    // backgroundColor: \"teal\"\r\n  },\r\n  info: {\r\n    fontSize: 16,\r\n    paddingLeft: theme.spacing(2),\r\n    color: 0x424242,\r\n  },\r\n}));\r\n\r\nfunction PopperX(props) {\r\n  const classes = useStyles();\r\n  const isTouched = props.isTouched;\r\n  const { roomName, roomNumber, deskcount, physicalDeskcount } = props.roomInfo;\r\n  //   const roomName = props.roomName;\r\n  const [pointX, setPointX] = useState(window.innerWidth / 3);\r\n  const [pointY, setPointY] = useState(window.innerHeight / 10);\r\n\r\n  const anchorEl = {\r\n    clientWidth: 0,\r\n    clientHeight: 80,\r\n    getBoundingClientRect: () => {\r\n      return {\r\n        width: 0,\r\n        height: 0,\r\n        top: pointY,\r\n        bottom: pointY,\r\n        right: pointX,\r\n        left: pointX,\r\n      };\r\n    },\r\n  };\r\n\r\n  const handleResize = () => {\r\n    setPointX(window.innerWidth / 3);\r\n    setPointY(window.innerHeight / 10);\r\n  };\r\n\r\n  window.addEventListener(\"resize\", handleResize, false);\r\n\r\n  return (\r\n    <Popper\r\n      open={isTouched}\r\n      anchorEl={anchorEl}\r\n      transition\r\n      placement=\"bottom-start\"\r\n    >\r\n      {({ TransitionProps }) => (\r\n        <Fade {...TransitionProps} timeout={350}>\r\n          <Card className={classes.card}>\r\n            <Typography l=\"5\" className={classes.info}>\r\n              Room Name: {roomName}\r\n            </Typography>\r\n            <Typography l=\"5\" className={classes.info}>\r\n              Room Number: {roomNumber}\r\n            </Typography>\r\n            <Typography l=\"5\" className={classes.info}>\r\n              Desk Count: {deskcount}\r\n            </Typography>\r\n            <Typography l=\"5\" className={classes.info}>\r\n              Physical Desk Count: {physicalDeskcount}\r\n            </Typography>\r\n          </Card>\r\n        </Fade>\r\n      )}\r\n    </Popper>\r\n  );\r\n}\r\n\r\nexport default PopperX;\r\n","// third party packages\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// local components\r\nimport { ProjectsURL } from \"../../utils/Constant\";\r\nimport { useFetch } from \"../../utils/useFetch\";\r\n\r\n// material ui\r\nimport Input from \"@material-ui/core/Input\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    width: 600,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nexport const RoomInfoModal = React.forwardRef((props, ref) => {\r\n  const classes = useStyles();\r\n\r\n  const currentProjectID = props.currentProjectID;\r\n  const floorID = props.floorID;\r\n  const roomID = props.roomID;\r\n  const url =\r\n    ProjectsURL +\r\n    currentProjectID +\r\n    \"/floors/\" +\r\n    floorID +\r\n    \"/rooms/\" +\r\n    roomID +\r\n    \"/\";\r\n\r\n  const { data: roomInfo, loaded } = useFetch(url);\r\n\r\n  const [roomName, setRoomName] = useState(String);\r\n  const [roomNumber, setRoomNumber] = useState(String);\r\n  const [deskcount, setDeskcount] = useState(Number);\r\n  const [physicalDeskcount, setPhysicalDeskcount] = useState(Number);\r\n  const [programType, setProgramType] = useState(String);\r\n  const [internalRoomCount, setInternalRoomCount] = useState(Number);\r\n  const [hasWindow, setHasWindow] = useState(Boolean);\r\n  const [hasAV, setHasAV] = useState(Boolean);\r\n  const [note, setNote] = useState(String);\r\n\r\n  useEffect(() => {\r\n    if (loaded) {\r\n      setRoomName(roomInfo.attributes.room_name);\r\n      setRoomNumber(roomInfo.attributes.room_number);\r\n      setDeskcount(roomInfo.attributes.deskcount);\r\n      setPhysicalDeskcount(roomInfo.attributes.physical_deskcount);\r\n      setProgramType(roomInfo.attributes.program_type);\r\n      setInternalRoomCount(roomInfo.attributes.internal_room_count);\r\n      setHasWindow(roomInfo.attributes.has_window);\r\n      setHasAV(roomInfo.attributes.has_av);\r\n      setNote(roomInfo.attributes.note);\r\n    }\r\n  }, [loaded, roomInfo]);\r\n  // not sure\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n  const config = { headers: { \"Content-Type\": \"application/vnd.api+json\" } };\r\n\r\n  const handleHasWindow = (event) => {\r\n    setHasWindow(event.target.checked);\r\n  };\r\n  const handleHasAV = (event) => {\r\n    setHasAV(event.target.checked);\r\n  };\r\n\r\n  const handleOnSave = () => {\r\n    setEditMode(false);\r\n    const content = {\r\n      data: {\r\n        type: \"Room\",\r\n        id: roomID,\r\n        attributes: {\r\n          room_name: roomName,\r\n          room_number: roomNumber,\r\n          deskcount: deskcount,\r\n          physical_deskcount: physicalDeskcount,\r\n          program_type: programType,\r\n          internal_room_count: internalRoomCount,\r\n          has_window: hasWindow,\r\n          has_av: hasAV,\r\n          note: note,\r\n        },\r\n      },\r\n    };\r\n    axios.patch(url, content, config);\r\n  };\r\n\r\n  return loaded ? (\r\n    <div className={classes.paper} ref={ref} tabIndex={-1}>\r\n      {editMode ? (\r\n        <Container maxWidth=\"md\">\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"center\"\r\n            spacing={1}\r\n            style={{ minHeight: \"10vh\" }}\r\n          >\r\n            <Grid item xs={8} align=\"center\">\r\n              {roomName + \" \" + roomNumber}\r\n            </Grid>\r\n            <Grid item xs={4} align=\"center\">\r\n              <Button variant=\"outlined\" size=\"small\" onClick={handleOnSave}>\r\n                Save\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Room Name:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              <Input\r\n                defaultValue={roomName}\r\n                inputProps={{ \"aria-label\": \"description\" }}\r\n                onChange={(event) => setRoomName(event.target.value)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Room Number:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              <Input\r\n                defaultValue={roomNumber}\r\n                inputProps={{ \"aria-label\": \"description\" }}\r\n                onChange={(event) => setRoomNumber(event.target.value)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Desk Count:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              <Input\r\n                defaultValue={deskcount}\r\n                inputProps={{ \"aria-label\": \"description\" }}\r\n                onChange={(event) => setDeskcount(event.target.value)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Physical Desk Count:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              <Input\r\n                defaultValue={physicalDeskcount}\r\n                inputProps={{ \"aria-label\": \"description\" }}\r\n                onChange={(event) => setPhysicalDeskcount(event.target.value)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Program Type:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              <Input\r\n                disabled\r\n                defaultValue={programType}\r\n                inputProps={{ \"aria-label\": \"description\" }}\r\n                onChange={(event) => setProgramType(event.target.value)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Internal Room Count:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              <Input\r\n                defaultValue={internalRoomCount}\r\n                inputProps={{ \"aria-label\": \"description\" }}\r\n                onChange={(event) => setInternalRoomCount(event.target.value)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Has Window:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              <Checkbox\r\n                checked={hasWindow}\r\n                onChange={handleHasWindow}\r\n                inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Has AV:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              <Checkbox\r\n                checked={hasAV}\r\n                onChange={handleHasAV}\r\n                inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Note:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              <Input\r\n                defaultValue={note}\r\n                inputProps={{ \"aria-label\": \"description\" }}\r\n                onChange={(event) => setNote(event.target.value)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      ) : (\r\n        <Container maxWidth=\"md\">\r\n          <Grid\r\n            container\r\n            spacing={1}\r\n            alignItems=\"center\"\r\n            justify=\"center\"\r\n            style={{ minHeight: \"10vh\" }}\r\n          >\r\n            <Grid item xs={8} align=\"center\">\r\n              {roomName + \" \" + roomNumber}\r\n            </Grid>\r\n            <Grid item xs={4} align=\"center\">\r\n              <IconButton\r\n                aria-label=\"edit\"\r\n                size=\"medium\"\r\n                onClick={() => setEditMode(true)}\r\n              >\r\n                <EditIcon fontSize=\"inherit\" />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Room Name:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              {roomName}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Room Number:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              {roomNumber}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Desk Count:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              {deskcount}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Physical Desk Count:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              {physicalDeskcount}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Program Type:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              {programType}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Internal Room Count:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              {internalRoomCount}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Has Window:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              <Checkbox\r\n                disabled\r\n                checked={hasWindow}\r\n                inputProps={{ \"aria-label\": \"disabled checked checkbox\" }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Has AV:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              <Checkbox\r\n                disabled\r\n                checked={hasAV}\r\n                inputProps={{ \"aria-label\": \"disabled checked checkbox\" }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1} style={{ minHeight: \"7vh\" }}>\r\n            <Grid item xs={6}>\r\n              Note:\r\n            </Grid>\r\n            <Grid item xs={6} align=\"right\">\r\n              {note}\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      )}\r\n    </div>\r\n  ) : (\r\n    <div style={{ width: 450 }} ref={ref} tabIndex={-1}>\r\n      <CircularProgress\r\n        style={{ position: \"absolute\", top: \"50%\", left: \"50%\" }}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","import * as THREE from \"three\";\r\n\r\nfunction HelperMode(params) {\r\n  const { mode, envLights, camera, showAxes } = params;\r\n  let helperGroup = new THREE.Group();\r\n\r\n  if (mode === \"on\") {\r\n    if (envLights) {\r\n      envLights.children.forEach(light => {\r\n        let lightHelper = new THREE.DirectionalLightHelper(light);\r\n        helperGroup.add(lightHelper);\r\n      });\r\n    }\r\n    if (camera) {\r\n      // camera helper: used to help with visualizing a camera\r\n      // contians in its frustum\r\n      var cameraHelper = new THREE.CameraHelper(camera);\r\n      helperGroup.add(cameraHelper);\r\n    }\r\n    if (showAxes) {\r\n      // show origin point and axis directions\r\n      var axesHelper = new THREE.AxesHelper(5);\r\n      helperGroup.add(axesHelper);\r\n    }\r\n  }\r\n  return helperGroup;\r\n}\r\n\r\nexport default HelperMode;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  viz: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  button: {\r\n    position: \"absolute\",\r\n    top: 100,\r\n    right: 20,\r\n    background: \"rgb(225,225,225)\",\r\n  },\r\n  popper: {\r\n    position: \"absolute\",\r\n    marginLeft: 100,\r\n    marginTop: theme.spacing(0),\r\n  },\r\n  modal: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\nexport default styles;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport * as THREE from \"three\";\r\nimport React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\n\r\nimport EnvironmentLight from \"./lights\";\r\nimport RoomGenerator from \"./Mesh\";\r\nimport Camera, { calculateRegion } from \"./Camera\";\r\nimport CameraControl from \"./CameraControl\";\r\nimport PopperX from \"./PopperControl\";\r\nimport { RoomInfoModal } from \"./RoomInfoModal\";\r\n\r\nimport HelperMode from \"./helpers\";\r\nimport styles from \"./styles\";\r\nimport { useFetchList } from \"../../utils/useFetch\";\r\nimport { ProjectsURL } from \"../../utils/Constant\";\r\n\r\nfunction Viz(props) {\r\n  const { useRef, useEffect, useState } = React;\r\n  const mount = useRef(null);\r\n  const floorID = props.floorID;\r\n  const currentProjectID = props.currentProjectID;\r\n  const url = ProjectsURL + currentProjectID + \"/floors/\" + floorID + \"/rooms/\";\r\n  var isButtonOn = false;\r\n  var isDrag = false;\r\n  var mouse = new THREE.Vector2();\r\n  var raycaster = new THREE.Raycaster();\r\n  var timmerHandle, INTERSECTED;\r\n  const [isTouched, setIsTouched] = useState(Boolean);\r\n  const [roomInfo, setRoomInfo] = useState({\r\n    roomName: String,\r\n    roomNumber: String,\r\n    deskCount: Number,\r\n    physicalDeskCount: Number,\r\n  });\r\n  const [open, setOpen] = useState(false);\r\n  const [roomID, setRoomID] = useState(null);\r\n\r\n  const { data: rooms, loaded } = useFetchList(url);\r\n\r\n  useEffect(() => {\r\n    let targetWidth = mount.current.clientWidth;\r\n    let targetHeight = mount.current.clientHeight;\r\n\r\n    // scene settings\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xf0f0f0);\r\n\r\n    // renderer settings\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setClearColor(\"rgb(120, 120, 120)\");\r\n    renderer.setSize(targetWidth, targetHeight);\r\n\r\n    // add objects into scene\r\n    var primaryGroup = new THREE.Group();\r\n    primaryGroup.name = \"primary\";\r\n    var secondaryWork = new THREE.Group();\r\n    secondaryWork.name = \"secondary_work\";\r\n    var secondaryExtra = new THREE.Group();\r\n    secondaryExtra.name = \"secondary_extra\";\r\n\r\n    // create meshes based on returned data\r\n    let meshArray = [];\r\n    rooms.forEach((res) =>\r\n      meshArray.push(\r\n        new RoomGenerator({ id: res.id, attributes: res.attributes })\r\n      )\r\n    );\r\n\r\n    // seperate meshes into several groups\r\n    meshArray.forEach((mesh) => {\r\n      if (mesh.userData.programType) {\r\n        if (\r\n          mesh.userData.programType === \"WORK\" ||\r\n          mesh.userData.programType === \"MEET\"\r\n        ) {\r\n          secondaryWork.add(mesh);\r\n        } else {\r\n          secondaryExtra.add(mesh);\r\n        }\r\n      } else {\r\n        secondaryExtra.add(mesh);\r\n      }\r\n    });\r\n    primaryGroup.add(secondaryWork);\r\n    primaryGroup.add(secondaryExtra);\r\n    // center mesh group based on (0,0,0) using boundingBox\r\n    let GroupBB3 = new THREE.Box3();\r\n    GroupBB3.setFromObject(primaryGroup)\r\n      .getCenter(primaryGroup.position)\r\n      .multiplyScalar(-1);\r\n\r\n    // var b3helper = new THREE.Box3Helper(GroupBB3, 0x000000);\r\n    // scene.add(b3helper);\r\n\r\n    scene.add(primaryGroup);\r\n\r\n    // add environment lights on the scene\r\n    const environmentLight = new EnvironmentLight();\r\n    scene.add(environmentLight);\r\n\r\n    // add camera into scene\r\n    let camera = new Camera({\r\n      bb3: GroupBB3,\r\n      targetWidth: targetWidth,\r\n      targetHeight: targetHeight,\r\n    });\r\n    scene.add(camera);\r\n\r\n    const controls = new CameraControl({\r\n      camera: camera,\r\n      renderer: renderer,\r\n    });\r\n\r\n    // show helpers for devlopment mode\r\n    const helpers = new HelperMode({\r\n      mode: \"off\", // 'on' or 'off'\r\n      // envLights: environmentLight,\r\n      showAxes: true,\r\n      // camera: camera,\r\n    });\r\n    scene.add(helpers);\r\n\r\n    const renderScene = () => {\r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    const handleResize = () => {\r\n      targetWidth = mount.current.clientWidth;\r\n      targetHeight = mount.current.clientHeight;\r\n      renderer.setSize(targetWidth, targetHeight);\r\n      const { width, height } = calculateRegion({\r\n        bb3: GroupBB3,\r\n        targetWidth: targetWidth,\r\n        targetHeight: targetHeight,\r\n      });\r\n      camera.left = -width / 2;\r\n      camera.right = width / 2;\r\n      camera.top = height / 2;\r\n      camera.bottom = -height / 2;\r\n      camera.updateProjectionMatrix();\r\n      renderScene();\r\n    };\r\n\r\n    const onButtonClick = (event) => {\r\n      event.preventDefault();\r\n      isButtonOn = !isButtonOn;\r\n      const secondaryWorkMeshes = scene.getObjectByName(\"secondary_work\");\r\n      if (secondaryWorkMeshes) {\r\n        var meshes = secondaryWorkMeshes.children;\r\n      }\r\n      if (isButtonOn) {\r\n        meshes.forEach((mesh) => {\r\n          let programType = mesh.userData.programType;\r\n          if (programType === \"WORK\") {\r\n            let deskcount = mesh.userData.deskcount;\r\n            if (deskcount > 10) {\r\n              mesh.material.color.setHex(0xfc03f0);\r\n            } else {\r\n              mesh.material.color.setHex(0x646464);\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        meshes.forEach((mesh) => {\r\n          let programType = mesh.userData.programType;\r\n          if (programType === \"WORK\") {\r\n            let hasWindow = mesh.userData.hasWindow;\r\n            if (hasWindow) {\r\n              mesh.material.color.setHex(0xe4f3f7);\r\n            } else {\r\n              mesh.material.color.setHex(0xabdde7);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    const onMouseDown = () => {\r\n      // console.log(\"mouse down\");\r\n      isDrag = false;\r\n      timmerHandle = setTimeout(() => {\r\n        // console.log(\"draging\");\r\n        isDrag = true;\r\n      }, 200);\r\n    };\r\n\r\n    const updateMousePos = (x, y) => {\r\n      mouse.x = (x / targetWidth) * 2 - 1;\r\n      mouse.y = -(y / targetHeight) * 2 + 1;\r\n      // console.log(mouse.x, mouse.y);\r\n    };\r\n\r\n    const onMouseMove = (event) => {\r\n      event.preventDefault();\r\n      updateMousePos(event.offsetX, event.offsetY);\r\n\r\n      // update the picking ray with the camera and mouse position\r\n      raycaster.setFromCamera(mouse, camera);\r\n\r\n      const rooms = scene.getObjectByName(\"secondary_work\");\r\n\r\n      // calculate objects intersecting the picking ray\r\n      if (rooms) {\r\n        var intersects = raycaster.intersectObjects(rooms.children);\r\n      }\r\n\r\n      // if there is one (or more) intersections\r\n      if (intersects.length > 0) {\r\n        // if the closest object intersected is not the currently stored intersection object\r\n        if (intersects[0].object !== INTERSECTED) {\r\n          // restore previous intersection object (if is exists) to its original color\r\n          if (INTERSECTED) {\r\n            INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\r\n          }\r\n          // store reference to closest object as current intersection object\r\n          INTERSECTED = intersects[0].object;\r\n          setRoomInfo({\r\n            roomName: INTERSECTED.userData.roomName,\r\n            roomNumber: INTERSECTED.userData.roomNumber,\r\n            deskcount: INTERSECTED.userData.deskcount,\r\n            physicalDeskcount: INTERSECTED.userData.physicalDeskcount,\r\n          });\r\n          setIsTouched(true);\r\n          // store color of closest object (for later restoration)\r\n          INTERSECTED.currentHex = INTERSECTED.material.color.getHex();\r\n          // set a new color for closest object\r\n          INTERSECTED.material.color.setHex(0xffffff);\r\n        }\r\n      } // there are no intersections\r\n      else {\r\n        // restore previous intersection object (if it exists) to its orginal color\r\n        if (INTERSECTED) {\r\n          INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\r\n        }\r\n        // remove previous intersection object reference to \"nothing\"\r\n        INTERSECTED = null;\r\n        setIsTouched(false);\r\n      }\r\n    };\r\n\r\n    const onMouseUp = (event) => {\r\n      event.preventDefault();\r\n      updateMousePos(event.offsetX, event.offsetY);\r\n\r\n      // update the picking ray with the camera and mouse position\r\n      raycaster.setFromCamera(mouse, camera);\r\n\r\n      const rooms = scene.getObjectByName(\"secondary_work\");\r\n\r\n      // calculate objects intersecting the picking ray\r\n      if (rooms) {\r\n        var intersects = raycaster.intersectObjects(rooms.children);\r\n      }\r\n\r\n      if (!isDrag) {\r\n        clearTimeout(timmerHandle);\r\n        if (intersects.length > 0) {\r\n          setRoomID(intersects[0].object.userData.roomID);\r\n          setOpen(true);\r\n          // intersects[0].object.callback();\r\n          // console.log(intersects[0].object);\r\n        }\r\n      } else {\r\n        isDrag = false;\r\n        // console.log(\"draging over\");\r\n      }\r\n    };\r\n\r\n    const animate = () => {\r\n      renderScene();\r\n      window.requestAnimationFrame(animate);\r\n      controls.update();\r\n    };\r\n\r\n    mount.current.appendChild(renderer.domElement);\r\n    window.addEventListener(\"resize\", handleResize);\r\n    mount.current.addEventListener(\"mousemove\", onMouseMove, false);\r\n    mount.current.addEventListener(\"mousedown\", onMouseDown, false);\r\n    mount.current.addEventListener(\"mouseup\", onMouseUp, false);\r\n    var button = document.getElementById(\"button\");\r\n    button.addEventListener(\"click\", onButtonClick, false);\r\n    requestAnimationFrame(animate);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      mount.current.removeEventListener(\"mousemove\", onMouseMove);\r\n      mount.current.removeEventListener(\"mousedown\", onMouseDown);\r\n      mount.current.removeEventListener(\"mouseup\", onMouseUp);\r\n      mount.current.removeChild(renderer.domElement);\r\n      button.removeEventListener(\"click\", onButtonClick);\r\n      meshArray.forEach((mesh) => {\r\n        scene.remove(mesh);\r\n        mesh.geometry.dispose();\r\n        mesh.material.dispose();\r\n      });\r\n    };\r\n  }, [loaded, rooms]);\r\n\r\n  const classes = styles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.viz} ref={mount}></div>\r\n      <Button id=\"button\" className={classes.button} variant=\"outlined\">\r\n        Above 10 desks\r\n      </Button>\r\n      {isTouched ? (\r\n        <PopperX isTouched={isTouched} roomInfo={roomInfo}></PopperX>\r\n      ) : null}\r\n      {roomID ? (\r\n        <Modal\r\n          className={classes.modal}\r\n          anchor=\"left\"\r\n          open={open}\r\n          onClose={() => {\r\n            setOpen(false);\r\n            setRoomID(null);\r\n          }}\r\n        >\r\n          <RoomInfoModal\r\n            currentProjectID={currentProjectID}\r\n            floorID={floorID}\r\n            roomID={roomID}\r\n          />\r\n        </Modal>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Viz;\r\n"],"sourceRoot":""}